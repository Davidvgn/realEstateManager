plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'dagger.hilt.android.plugin'
    id 'jacoco'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
}

android {
    namespace 'com.openclassrooms.realestatemanager'
    compileSdkVersion 33

    defaultConfig {
        applicationId "com.openclassrooms.realestatemanager"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    signingConfigs {
        debug {
            storeFile file("../keystore_debug.jks")
            storePassword "android"
            keyAlias "realEstateManagerdebugkey"
            keyPassword "android"
        }

        //        release {
//            storeFile file("../keystore_debug.jks")
//            storePassword "android"
//            keyAlias "debug"
//            keyPassword "android"
//        }
    }

    buildTypes {
        release {
            //            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled = true
    }

    kotlinOptions {
        jvmTarget = "11"
    }
}

dependencies {
    def room_version = "2.5.0"

    // Android
    implementation "androidx.core:core-ktx:1.9.0"
    // Kotlin
    implementation "androidx.fragment:fragment-ktx:1.5.7"
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    implementation 'com.github.bumptech.glide:glide:4.14.2'

    // Lifecycle components
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.1'
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:2.6.1"

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:31.5.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.android.gms:play-services-auth:20.5.0'
    implementation 'com.google.firebase:firebase-firestore:24.5.0'

    //Hilt
    implementation "com.google.dagger:hilt-android:2.44.2"
    kapt "com.google.dagger:hilt-compiler:2.44"
    annotationProcessor "com.google.dagger:hilt-compiler:2.44.2"


    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation "com.google.code.gson:gson:2.9.1"
    implementation "com.squareup.okhttp3:logging-interceptor:4.10.0"

    // Worker
    implementation "androidx.work:work-runtime:2.7.1"
    // see https://developer.android.com/training/dependency-injection/hilt-jetpack#workmanager
    implementation 'androidx.hilt:hilt-work:1.0.0' // Supports injection for Worker
    annotationProcessor 'androidx.hilt:hilt-compiler:1.0.0' // Supports annotations when injecting a worker


    // Room
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-guava:$room_version"
    implementation "androidx.room:room-paging:$room_version"

    testImplementation 'junit:junit:4.13.2'
    testImplementation "io.mockk:mockk:1.13.3"
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'org.hamcrest:java-hamcrest:2.0.0.0'
    testImplementation "androidx.room:room-testing:$room_version"

}


// open JaCoCo report after generation
def openReport(htmlOutDir) {
    final reportPath = "$htmlOutDir\\index.html"

    println "HTML Report: $reportPath"

    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.isWindows()) {
        exec { commandLine 'cmd', '/c', "start $reportPath" }
    } else if (os.isLinux()) {
        try {
            exec { commandLine 'xdg-open', "$reportPath" }
        } catch (Exception ignored) {
            if (localProperties.containsKey("linux-html-cmd")) {
                exec { commandLine properties.get("linux-html-cmd"), "$reportPath" }
            } else {
                println "'linux-html-cmd' property could not be found in 'local.properties'"
            }
        }
    }
}

// JaCoCo stuff
android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize()
    def filesToAnalyze = [
            '**/*ViewModel.class',
            '**/*Repository.class'
    ]

    task("jacoco${variantName}Report", type: JacocoReport, dependsOn: "test${variantName}UnitTest") {
        group 'Reporting'
        description "Generate ${variantName} Jacoco coverage reports."

        def htmlOutDir = layout.buildDirectory.dir("reports/jacoco/$name/html").get().asFile

        doLast {
            openReport htmlOutDir
        }

        reports {
            xml.enabled = true
            html {
                destination htmlOutDir
            }
        }

        getSourceDirectories().setFrom(files(android.sourceSets.main.java.srcDirs))
        getExecutionData().setFrom(files("${buildDir}/jacoco/test${variantName}UnitTest.exec"))
        getClassDirectories().setFrom(fileTree(dir: variant.javaCompiler.destinationDir, includes: filesToAnalyze))
    }
}